// <auto-generated />
using System;
using System.Collections.Generic;
using ELearningIskoop.Courses.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ELearningIskoop.Courses.Infrastructure.Migrations
{
    [DbContext(typeof(CoursesDbContext))]
    [Migration("20250806141919_Mg_001")]
    partial class Mg_001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("courses")
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Category", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("IconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.HasKey("ObjectId");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Categories_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Categories_Name");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("IX_Categories_ParentCategoryId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Categories_Slug");

                    b.HasIndex("IsActive", "DisplayOrder")
                        .HasDatabaseName("IX_Categories_IsActive_DisplayOrder");

                    b.ToTable("Categories", "courses");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Course", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<int>("CurrentStudentCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("MaxStudents")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TrailerVideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("InstructorEmail", "ELearningIskoop.Courses.Domain.Entities.Course.InstructorEmail#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(254)
                                .HasColumnType("character varying(254)")
                                .HasColumnName("InstructorEmail");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("InstructorName", "ELearningIskoop.Courses.Domain.Entities.Course.InstructorName#PersonName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("InstructorFirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("InstructorLastName");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "ELearningIskoop.Courses.Domain.Entities.Course.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("Currency");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("TotalDuration", "ELearningIskoop.Courses.Domain.Entities.Course.TotalDuration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("TotalMinutes")
                                .HasColumnType("integer")
                                .HasColumnName("TotalDurationMinutes");
                        });

                    b.HasKey("ObjectId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Courses_CreatedAt");

                    b.HasIndex("Level")
                        .HasDatabaseName("IX_Courses_Level");

                    b.HasIndex("PublishedAt")
                        .HasDatabaseName("IX_Courses_PublishedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Courses_Status");

                    b.HasIndex("IsDeleted", "Status")
                        .HasDatabaseName("IX_Courses_IsDeleted_Status");

                    b.HasIndex("Title", "Description")
                        .HasDatabaseName("IX_Courses_FullText");

                    b.ToTable("Courses", "courses");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.CourseCategory", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer");

                    b.HasKey("ObjectId");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_CourseCategories_CategoryId");

                    b.HasIndex("CourseId", "CategoryId")
                        .IsUnique()
                        .HasDatabaseName("IX_CourseCategories_CourseId_CategoryId");

                    b.ToTable("CourseCategories", "courses");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("integer");

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("InteractiveContent")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.ComplexProperty<Dictionary<string, object>>("Duration", "ELearningIskoop.Courses.Domain.Entities.Lesson.Duration#Duration", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("TotalMinutes")
                                .HasColumnType("integer")
                                .HasColumnName("DurationMinutes");
                        });

                    b.HasKey("ObjectId");

                    b.HasIndex("ContentType")
                        .HasDatabaseName("IX_Lessons_ContentType");

                    b.HasIndex("CourseId")
                        .HasDatabaseName("IX_Lessons_CourseId");

                    b.HasIndex("CourseId", "Order")
                        .IsUnique()
                        .HasDatabaseName("IX_Lessons_CourseId_Order");

                    b.HasIndex("IsPublished", "IsFree")
                        .HasDatabaseName("IX_Lessons_IsPublished_IsFree");

                    b.ToTable("Lessons", "courses");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Category", b =>
                {
                    b.HasOne("ELearningIskoop.Courses.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.CourseCategory", b =>
                {
                    b.HasOne("ELearningIskoop.Courses.Domain.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELearningIskoop.Courses.Domain.Entities.Course", "Course")
                        .WithMany("Categories")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("ELearningIskoop.Courses.Domain.Entities.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Category", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ELearningIskoop.Courses.Domain.Entities.Course", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Lessons");
                });
#pragma warning restore 612, 618
        }
    }
}
